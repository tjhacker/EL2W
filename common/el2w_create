#!/bin/bash
# els2_create
# Purpose: Create a EL2W port on the system
# status is for overall availability of service,
# not for specific EL2W service ports
# EL2W status stored in /var/EL2W/service
# EL2W port X status in /var/EL2W/ports/X

# Create EL2W port name PORT with VXlan ID N
############################################################
# Probably need a wrapper for this...
# el2wctl start  (start -> I-PR->I-A->I-LC)
# el2wctl status (report value of /var/EL2W/service and all EL2W ports)
# el2wctl restart (restore status to I-LC (somehow) )
# el2wctl stop (revert to start state - nothing running)
############################################################

USAGE="Syntax: el2w_create \n
	\t-m EL2W-port-name \n
	\t-i ipsec-adapter-name \n
	\t-a remote-ipsec-address \n
	\t-n ipsec-connection-name \n
	\t-v VXLAN-id \n
	\t-r <hub|spoke> \n
	\t-s <spoke name from Venus, Mars, Earth>"

# Create EL2W port name PORT with VXlan ID N
MPORT=""
MPORT_ID=""
IPSEC_ADAPTER=""
REMOTE_IPSEC_ADDR=""

export VAGRANT_ROLE="spoke"
export SPOKE_NAME=""
export HUB_NAME="sun"

export LOCALIP=192.7.7.10
BRIDGE=ovs-br1

export IPSEC_CONN_NAME=""

# Process options for create operation
while getopts m:b:i:a:n:v:r:s:h option; do
  case "${option}" in
  m) MPORT=${OPTARG} ;;
  i) IPSEC_ADAPTER=${OPTARG} ;;
  a) REMOTE_IPSEC_ADDR=${OPTARG} ;;
  n) IPSEC_CONN_NAME=${OPTARG} ;;
  v) MPORT_ID=${OPTARG} ;;
  r) VAGRANT_ROLE=${OPTARG} ;;
  s) SPOKE_NAME=${OPTARG} ;;
  h) echo -e $USAGE && exit 0 ;;
  esac
done

if [ -z $MPORT ]; then
  echo EL2W port name missing.
  exit 1
fi

if [ -z $MPORT_ID ]; then
  echo VXLAN id missing.
  exit 1
fi

if [ -z $IPSEC_ADAPTER ]; then
  echo IPsec adapter name missing.
  exit 1
fi

if [ -z $REMOTE_IPSEC_ADDR ]; then
  echo Remote IP address of IPsec tunnel missing.
  exit 1
fi

if [ -z $IPSEC_CONN_NAME ]; then
  echo IPSEC connection name missing.
  exit 1
fi

if [ -z $VAGRANT_ROLE ]; then
  echo "Vagrant role (hub or spoke) missing."
  exit 1
fi

if [[ $VAGRANT_ROLE == "spoke" ]]; then
  if [ -z $SPOKE_NAME ]; then
    echo "Spoke name (one of Earth, Mars, or Venus) is missing."
    exit 1
  fi
fi

#export MPORT=vxlan0
#export MPORT_ID=21
#export IPSEC_ADAPTER=eth2
#export REMOTE_IPSEC_ADDR=192.100.88.10
#export VAGRANT_ROLE="spoke"

export EL2W_STATE_DIR=/var/EL2W

mkdir -p $(dirname $EL2W_STATE_DIR)
export EL2W_STATUS=$EL2W_STATE_DIR/status
export PORT_STATUS=$EL2W_STATE_DIR/ports/$MPORT

echo "PS" $PORT_STATUS
mkdir -p $(dirname $PORT_STATUS)

test -e $EL2W_STATUS
if [[ $? == 1 ]]; then
  # Not there - intialize with status
  echo "Start" >$EL2W_STATUS
  echo "Start" >$PORT_STATUS
else
  echo -n "Existing EL2W status: "
  cat $EL2W_STATUS
fi

#EL2W port X status in /var/EL2W/ports/X

# If EL2W port is already up, just return.
if [[ $(cat $PORT_STATUS | grep "V-Up") ]]; then
  echo "EL2W port already up."
  exit 0
fi

# start EL2W service

# Keep state in a file in /var/EL2W <- probably start here to keep complexity down until I know I need to use systemctl

# use el2wctl to start with, can transition to systemctl someday if needed

# Verify prerequisites (I-PR) for EL2W ports
# what are prereqs ?
#  1. necessary packages installed
#	strongswan openvswitch libibverbs policycoreutils-python openssl-devel pam-devel selinux-policy-devel

echo "export PATH=/usr/local/bin:/usr/share/openvswitch/scripts/:$PATH" >>/etc/bashrc
export PATH=/usr/local/bin:/usr/share/openvswitch/scripts/:$PATH
hash

rpm -q strongswan openvswitch libibverbs openssl-devel pam-devel selinux-policy-devel rsync supervisor git
if [[ $? != 0 ]]; then
  echo "Package(s) missing. Installing required packages."
  yum -y install strongswan libibverbs openssl-devel pam-devel selinux-policy-devel nftables rsync supervisor git tpm2-tss tpm2-abrmd libcap-ng

  # Need this to get a compiled openvswitch package
  command -v /usr/share/openvswitch/scripts/ovs-ctl
  if [[ $? != 0 ]]; then
    cd /usr/local/src
    wget --progress=bar:force:noscroll https://github.com/openvswitch/ovs/tarball/master
    mv master master.tar.gz
    tar zxf master.tar.gz
    cd openvswitch*
    sh -x ./boot.sh
    ./configure --prefix=/usr --localstatedir=/var --sysconfdir=/etc
    make -j 4
    make install
  fi
else
  echo "Required packages installed."
fi

# 1.0.1 pull in configuration information from git
cd /home/vagrant
###git clone https://github.com/tjhacker/ipxehttpproxy.git

# 1.0.2 Change MACAdressPolicy to allow VXLAN adapters to work with OpenVSwitch
sed -i 's/^MACAddressPolicy=persistent/MACAddressPolicy=none/' /usr/lib/systemd/network/99-default.link
if [[ $? != 0 ]]; then
  echo "Attept to set MACAddressPolicy failed. Exiting."
  exit 1
fi

# 1.1 Configure hostfile
if [ $VAGRANT_ROLE == "hub" ]; then
  m4 -DSUN_IPADDR="10.210.210.41" /vagrant_data/strongswan/hosts.m4 >/etc/hosts
fi

if [ $VAGRANT_ROLE == "spoke" ]; then
  # %jumphost
  cat /vagrant_data/Juno/hosts >>/etc/hosts
fi

# 1.2. Ensure necessary services started and running (I-A)
#	strongswan openvswitch selinux firewall duo_unix fail2ban
if [[ $(systemctl is-active strongswan openvswitch firewalld fail2ban | egrep "(inactive|unknown)") ]]; then
  echo "Systems not ready. Starting necessary systems."
  systemctl enable strongswan-starter.service
  systemctl start strongswan-starter.service
  ovs-ctl start
  systemctl enable fail2ban
  systemctl start fail2ban
else
  echo "Required systems ready."
fi

# 1.3. configure and check firewall options
# Check that critical ports for ipsec and vxlan are ready.

# Add firewall rules to allow IPsec and VXlan
firewall-cmd --zone=dmz --permanent --add-rich-rule='rule protocol value="esp" accept'
firewall-cmd --zone=dmz --permanent --add-rich-rule='rule protocol value="ah" accept'
firewall-cmd --zone=dmz --permanent --add-port=500/udp
firewall-cmd --zone=dmz --permanent --add-port=4500/udp
firewall-cmd --permanent --add-service="ipsec"
firewall-cmd --permanent --add-port=8472/udp            # vxlan port
firewall-cmd --permanent --add-port=8472/udp --zone=dmz # vxlan port

# Allow traffic from the local lan to go through this firewall for NAT access to the outside.
firewall-cmd --zone=public --add-rich-rule='rule family=ipv4 source address=192.7.7.0/24 masquerade' --permanent

firewall-cmd --reload
systemctl start NetworkManager

# 1.4. Prevent auto DNS assignment to system
if [ $VAGRANT_ROLE == "hub" ]; then
  nmcli con show "System eth0" | grep ipv4.ignore-auto-dns
  if [[ $? != 'yes' ]]; then
    nmcli con mod "System eth0" ipv4.ignore-auto-dns yes
  fi
fi

if [ $VAGRANT_ROLE == "spoke" ]; then
  nmcli con up "System eth0"
  # Select hostname based on spoke name
  case $SPOKE_NAME in
  "Earth")
    export SPOKE_HOSTNAME="earth.load"
    ;;
  "Venus")
    export SPOKE_HOSTNAME="venus.load"
    ;;
  "Mars")
    export SPOKE_HOSTNAME="mars.load"
    ;;
  esac
  nmcli general hostname $SPOKE_HOSTNAME
fi

echo "I-PR Prequiresites Verified" >$PORT_STATUS

# 2. Check availability of IPsec peer server on network (unencrypted IP address) (I-A)
ping -c 1 -w 4 sun ### XYZZY
if [[ $? != 0 ]]; then
  echo "IPsec target host unreachable. This is required to establish IPsec tunnel."
else
  echo "I-A Peer Available" >$PORT_STATUS
fi

# 3. Configure strongswan and load configuration files
# Setup and start ipsec (strongswan)

# if IPsec tunnel is already up, we can move to the next stage.
test -e /etc/strongswan/swanctl/conf.d/*.conf
export testswandir=$?

strongswan status $IPSEC_CONN_NAME | grep ESTABLISHED
if [ $? != 0 ]; then
  export test_ipsec_conn=0
else
  export test_ipsec_conn=1
fi

if [ $testswandir != 0 ]; then
  # 3.1 Certificate management
  if [ $VAGRANT_ROLE == "hub" ]; then
    # If certificates have not been created, then create them.
    test -e '/home/vagrant/certs/CA.crt'
    if [ $? != 0 ]; then
      mkdir -p /home/vagrant/certs
      cd /home/vagrant/certs

      # Create X509 certficates for server and jumphost
      strongswan pki --gen --outform pem >CAKey.key
      strongswan pki --gen --outform pem >hostSunKey.key
      strongswan pki --gen --outform pem >hostMarsKey.key
      strongswan pki --gen --outform pem >hostEarthKey.key
      strongswan pki --gen --outform pem >hostVenusKey.key
      strongswan pki --self --in CAKey.key --ca --outform pem \
        --dn "C=US,ST=Indiana,L=West Lafayette,O=Purdue University,emailAddress=tjhacker@purdue.edu,CN=strongSwan CA" >CA.crt
      strongswan pki --issue --in hostSunKey.key --type priv --cacert CA.crt --cakey CAKey.key --san sun.localdomain --outform pem \
        --dn "C=US,ST=Indiana,L=West Lafayette,O=Purdue University,emailAddress=tjhacker@purdue.edu,CN=sun.localdomain, OU=CIT" >hostSunCert.crt
      strongswan pki --issue --in hostMarsKey.key --type priv --cacert CA.crt --cakey CAKey.key --san mars.localdomain --outform pem \
        --dn "C=US,ST=Indiana,L=West Lafayette,O=Purdue University,emailAddress=tjhacker@purdue.edu,CN=mars.localdomain, OU=CIT" >hostMarsCert.crt
      strongswan pki --issue --in hostEarthKey.key --type priv --cacert CA.crt --cakey CAKey.key --san earth.localdomain --outform pem \
        --dn "C=US,ST=Indiana,L=West Lafayette,O=Purdue University,emailAddress=tjhacker@purdue.edu,CN=earth.localdomain, OU=CIT" >hostEarthCert.crt
      strongswan pki --issue --in hostVenusKey.key --type priv --cacert CA.crt --cakey CAKey.key --san venus.localdomain --outform pem \
        --dn "C=US,ST=Indiana,L=West Lafayette,O=Purdue University,emailAddress=tjhacker@purdue.edu,CN=venus.localdomain, OU=CIT" >hostVenusCert.crt
    fi
  fi
fi

if [ $VAGRANT_ROLE == "spoke" ]; then
  # Keys to be copied over depends on spoke name
  case $SPOKE_NAME in
  "Mars")
    export HOST_KEY="hostMarsKey.key"
    export HOST_CERT="hostMarsCert.crt"
    ;;
  "Earth")
    export HOST_KEY="hostEarthKey.key"
    export HOST_CERT="hostEarthCert.crt"
    ;;
  "Venus")
    export HOST_KEY="hostVenusKey.key"
    export HOST_CERT="hostVenusCert.crt"
    ;;
  esac

  # Copy over necessary X509 certs using DUO 2FA secure remote copy
  rsync -e "ssh -p 59842 -o 'UserKnownHostsFile /dev/null' -o 'StrictHostKeyChecking no'" \
    vagrant@sun:/home/vagrant/certs/CA.crt \
    vagrant@sun:/home/vagrant/certs/hostSunCert.crt \
    vagrant@sun:/home/vagrant/certs/$HOST_CERT \
    vagrant@sun:/home/vagrant/certs/$HOST_KEY \
    /home/vagrant/certs

  if [[ $? != 0 ]]; then
    echo "rsync failed."
    exit 1
  fi
fi

# 3.2. Create custom strongswan configuration file depending on role.
if [ $test_ipsec_conn == 0 ]; then # No active connection - establish ipsec tunnel
  if [ $VAGRANT_ROLE == "hub" ]; then
    # strongswan configuration file for hub
    m4 -D__LOCAL_FQDN="sun.localdomain" \
      -D__LOCAL_CERT="hostSunCert.crt" \
      -D__LOCALIP_TS="192.100.88.0/24" \
      -D__REMOTEIP_TS="192.100.42.0/24,192.100.44.0/24,192.100.46.0/24" \
      /vagrant_data/strongswan/uni.conf.m4 >/etc/strongswan/swanctl/conf.d/Olympus.ab.conf
  fi

  if [ $VAGRANT_ROLE == "spoke" ]; then
    # strongswan configuration file for spoke
    # determine local names based on spoke name
    case $SPOKE_NAME in
    "Earth")
      export LOCAL_FQDN="earth.localdomain"
      export LOCAL_CERT="hostEarthCert.crt"
      export LOCAL_TS="192.100.42.0/24"
      ;;
    "Venus")
      export LOCAL_FQDN="venus.localdomain"
      export LOCAL_CERT="hostVenusCert.crt"
      export LOCAL_TS="192.100.44.0/24"
      ;;
    "Mars")
      export LOCAL_FQDN="mars.localdomain"
      export LOCAL_CERT="hostMarsCert.crt"
      export LOCAL_TS="192.100.46.0/24"
      ;;
    esac
    m4 -D__LOCAL_FQDN=$LOCAL_FQDN \
      -D__REMOTE_FQDN="sun.localdomain" \
      -D__LOCAL_CERT=$LOCAL_CERT \
      -D__REMOTE_CERT="hostSunCert.crt" \
      -D__LOCALIP_TS=$LOCAL_TS \
      -D__REMOTEIP_TS="192.100.88.0/24" \
      /vagrant_data/strongswan/uni.conf.m4 >/etc/strongswan/swanctl/conf.d/ab.conf
  fi

  # 3.3 Install certficates for strongswan and start strongswan
  cp /home/vagrant/certs/CA.crt /etc/strongswan/swanctl/x509ca
  cp /home/vagrant/certs/host*Cert.crt /etc/strongswan/swanctl/x509
  cp /home/vagrant/certs/host*Key.key /etc/strongswan/swanctl/private

  systemctl enable strongswan-starter.service
  systemctl start strongswan-starter.service

  # Turn on strongswan connectivity
  swanctl --load-all
  if [[ $? != 0 ]]; then
    echo "swanctl --load-all failed."
    exit 1
  fi
fi

echo "I-LC Configuration Loaded" >$PORT_STATUS

echo "I-TC Tunnel Closed" >$PORT_STATUS

if [ $VAGRANT_ROLE == "hub" ]; then
  echo "I-TR IPsec Tunnel Endpoint Ready" >$PORT_STATUS
fi

if [ $VAGRANT_ROLE == "spoke" ]; then
  echo "I-CA IPsec Connection Attempt" >$PORT_STATUS
  swanctl -i -c host-host
  if [[ $? != 0 ]]; then
    echo "Attempt to create IPsec tunnel failed."
    exit 1
  fi

  # X. Test to see if other end of IPsec tunnel can be reached before
  # attempt to create VXlan connection.
  ping -c 1 -w 40 $REMOTE_IPSEC_ADDR
  if [[ $? != 0 ]]; then
    echo "IPsec tunnel host unreachable. This is required to establish vxlan tunnel."
    exit 1
  else
    echo "I-TO IPsec Tunnel Open" >$PORT_STATUS
  fi
fi

# 4. Create vxlan adapter (I-TC)
# VXLAN setup
# See if it already exists
ip link show $MPORT
if [[ $? != 0 ]]; then
  ip link add $MPORT type vxlan id $MPORT_ID dev $IPSEC_ADAPTER dstport 8472
  if [[ $? != 0 ]]; then
    echo "vxlan adapter creation failed."
    exit 1
  fi
fi

echo "V-C VXLan Port Created" >$PORT_STATUS

export BRDG=$(bridge fdb show 00:00:00:00:00:00 dst $REMOTE_IPSEC_ADDR dev $MPORT)
if [[ $BRDG == "" ]]; then
  bridge fdb add 00:00:00:00:00:00 dst $REMOTE_IPSEC_ADDR dev $MPORT # dst is remote ip sec IP addr
  if [[ $? != 0 ]]; then
    echo "bridge fdb add failed."
    exit 1
  fi
fi

ip link set up $MPORT
if [[ $? != 0 ]]; then
  echo "VXlan ip link up failed."
  exit 1
fi

ovs-ctl start
if [[ $? != 0 ]]; then
  echo "ovs-ctl start failed."
  exit 1
fi

ovs-vsctl --may-exist add-br $BRIDGE
if [[ $? != 0 ]]; then
  echo "ovs-vsctl add-br failed."
  exit 1
fi

# 4.2 add vxlan adapter and external NIC (for spoke) to EL2W bridge
if [ $VAGRANT_ROLE == "spoke" ]; then
  ovs-vsctl --may-exist add-port $BRIDGE eth1 # For external NIC
  if [[ $? != 0 ]]; then
    echo "attempt to add adapter to vxlan bridge failed."
    exit 1
  fi
fi

ovs-vsctl --may-exist add-port $BRIDGE $MPORT
if [[ $? != 0 ]]; then
  echo "attempt to add vxlan adapter to openvswitch switch failed."
  exit 1
fi

# Test VXlan connnection  - note that this assumes etherate is running on the
# other end of the VXlan connection is server mode
if [ $VAGRANT_ROLE == "spoke" ]; then
  # build and install etherate
  cd /home/vagrant
  git clone https://github.com/jwbensley/Etherate.git
  cd Etherate/
  cp /vagrant_data/etherate_patch/etherate.patch ./
  patch -p1 <etherate.patch
  ./configure.sh
  make install

  export EC=1
  export COUNT=0

  until [[ $EC -eq 0 || $COUNT -eq 5 ]]; do
    timeout -s INT 120s /usr/local/bin/etherate -i vxlan2 -t 3
    EC=$?
    let COUNT=COUNT+1
  done

  if [[ $EC != 0 ]]; then
    echo "Verification of open VXlan connection failed."
    exit 1
  fi
fi

echo "V-Up VXLan Port Up" >$PORT_STATUS
echo "State-Up" >$EL2W_STATUS

exit 0
